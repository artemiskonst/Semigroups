#############################################################################
##
##  homomorph.gi
##  Copyright (C) 2022                               Artemis Konstantinidi
##                                                         Chinmaya Nagpal
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

# This file contains a method for finding a homomorphism between semigroups
#
BindGlobal("DoSHBINC2", function(S, T, gens, imgs)
  local hom;
  # if HasGeneratorsOfGroup(G)
  #    and IsIdenticalObj(GeneratorsOfGroup(G),mapi[1]) then
  #   Append(obj_args, [PreImagesRange, G]);
  #   filter := filter and IsTotal and HasPreImagesRange;
  # fi;
  #
  # if HasGeneratorsOfGroup(H)
  #    and IsIdenticalObj(GeneratorsOfGroup(H),mapi[2]) then
  #   Append(obj_args, [ImagesSource, H]);
  #   filter := filter and IsSurjective and HasImagesSource;
  # fi;

  hom := Objectify(NewType(GeneralMappingsFamily(ElementsFamily(FamilyObj(S)),
                                                 ElementsFamily(FamilyObj(T))),
                           IsSemigroupHomomorphismByImages), rec());
  SetSource(hom, S);
  SetRange(hom, T);
  SetMappingGeneratorsImages(hom, [Immutable(gens), Immutable(imgs)]);

  return hom;
end);

InstallMethod(SemigroupHomomorphismByImages, "for two semigroups and two lists",
[IsSemigroup, IsSemigroup, IsList, IsList],
function(S, T, gens, imgs)
  local map, R, rel;

  if not ForAll(gens, x -> x in S) then
    ErrorNoReturn("the 3rd argument (a list) must consist of elements ",
                  "of the 1st argument (a semigroup)");
  elif Size(Semigroup(gens)) <> Size(S) then
    ErrorNoReturn("the 1st argument (a semigroup) is not generated by ",
                  "the 3rd argument (a list)");
  elif not ForAll(imgs, x -> x in S) then
    ErrorNoReturn("the 4th argument (a list) must consist of elements ",
                  "of the 2nd argument (a semigroup)");
  elif Size(gens) <> Size(imgs) then
    ErrorNoReturn("the 3rd argument (a list) and the 4th argument ",
                  "(a list) are not the same size");
  fi;

  # maps S to a finitely presented semigroup
  map := IsomorphismFpSemigroup(S);   # S (source) -> fp semigroup (range)
  # List of relations of the above finitely presented semigroup (hence of S)
  R   := RelationsOfFpSemigroup(Range(map));

  # check that each relation is satisfied by the elements imgs
  for rel in R do
    rel := List(rel, x -> SEMIGROUPS.ExtRepObjToWord(ExtRepOfObj(x)));
    if EvaluateWord(imgs, rel[1]) <> EvaluateWord(imgs, rel[2]) then
      return fail;
    fi;
  od;

  return SemigroupHomomorphismByImagesNC2(S, T, gens, imgs);
end);

InstallMethod(SemigroupHomomorphismByImagesNC2,
"for two semigroups and two lists",
[IsSemigroup, IsSemigroup, IsList, IsList], DoSHBINC2);

InstallMethod(ImageElm, "for a semigroup homom. by images and element",
[IsSemigroupHomomorphismByImages, IsMultiplicativeElement],
function(hom, x)
  if not x in Source(hom) then
    ErrorNoReturn("the 2nd argument is not an element of the source of the ",
    "1st argument (semigroup homom. by images)");
  fi;
  return EvaluateWord(MappingGeneratorsImages(hom)[2],
                      Factorization(Source(hom), x));
end);
